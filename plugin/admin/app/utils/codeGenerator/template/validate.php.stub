namespace <?php echo $file_path ?? '';?>;

use superadminx\think_validate\Validate;

/**
 * <?php echo $table_title ?? ''?> 验证器
 *
 * @author zy <741599086@qq.com>
 * @link https://www.superadminx.com/
 * */
class <?php echo $file_name ?? ''; ?> extends Validate
{
<?php
// 验证规则
if (isset($field_rules) && is_array($field_rules)) {
    echo "
    // 验证规则
    protected \$rule = [";

    foreach ($field_rules as $field => $rules_arr) {
        if (!$rules_arr) {
            continue;
        }
        // 将验证的详细规则塞进去，如 in:1,2,3 就是把in 与 1,2,3 连接起来
        foreach ($rules_arr as $k => $v) {
            if (isset($field_rules_info[$field][$v]) && $field_rules_info[$field][$v]) {
                $rules_arr[$k] = "{$v}:{$field_rules_info[$field][$v]}";
            }
        }

        // 验证规则的值
        $tmp_rule = implode('|', $rules_arr);
        // 字段的中文名称
        $tmp_field_title = (isset($field_title[$field]) && $field_title[$field] != '') ? $field_title[$field] : $field;

        echo "
        '{$field}|{$tmp_field_title}' => '{$tmp_rule}',";
    }

    echo "
    ];";
}
?>

<?php
// 验证场景
if (isset($scenes) && is_array($scenes) && isset($field_rules)) {
    // 要验证的规则，是所有字段，把所有字段转成输出数组的格式
    $tmp_field_rules = array_filter($field_rules, function($item) {  
        return count($item) > 0;
    });  
    $tmp_field_rules = array_keys($tmp_field_rules);
    $tmp_field_rules = "['" . implode("', '", $tmp_field_rules) . "']";

    foreach ($scenes as $scene) {
        // 首字母大写
        $tmp_name = ucfirst($scene['name']);
        // 验证场景 函数体返回内容，默认等于所有规则，如何有删除的可能会踢掉里面为空的规则
        $return = "return \$this->only({$tmp_field_rules})";

        if (isset($scene['delete_rules']) && is_array($scene['delete_rules'])) {
            $count = count($scene['delete_rules']);
            //要删除的规则
            if ($count > 0) {
                //要验证的字段，默认所有，如果某个字段的规则被删除完了就要踢掉
                $result_field_rules = array_filter($field_rules, function($item) {  
                    return count($item) > 0;
                });

                $tmp_delete_rules = [];
                //要删除的规则
                foreach ($scene['delete_rules'] as $key => $value) {
                    $tmp = explode('|', $value);

                    //要删除的规则里面把规则详情塞进去，如 in:1,2,3 就是把in 与 1,2,3 连接起来
                    if (isset($field_rules_info[$tmp[0]][$tmp[1]])) {
                        $tmp_delete_rules[$tmp[0]][] = "{$tmp[1]}:{$field_rules_info[$tmp[0]][$tmp[1]]}";
                    } else {
                        $tmp_delete_rules[$tmp[0]][] = $tmp[1];
                    }

                    //踢掉某个字段的规则
                    foreach ($result_field_rules as $k => $v) {
                        if ($k == $tmp[0]) {
                            $result_field_rules[$k] = array_filter($v, function($item) use ($tmp) {  
                                return $item != $tmp[1];
                            });  
                            break;
                        }
                    }
                }
                //$result_field_rules这个里面默认等于验证所有规则，经过筛选后里面的规则可能被删除为空了，此时需要踢掉
                foreach ($result_field_rules as $key => $value) {
                    if (count($value) == 0) {
                        unset($tmp_delete_rules[$key]);
                        unset($result_field_rules[$key]);
                    } 
                }
                if (count($result_field_rules) == 0) {
                    continue;
                }
                $return = array_keys($result_field_rules);
                $return = "['" . implode("', '", $return) . "']";
                $return = "return \$this->only({$return})";
                
                foreach ($tmp_delete_rules as $key => $value) {
                    $tmp    = implode('|', $value);
                    $return .= "
            ->remove('{$key}', '{$tmp}')";
                }
            }
        }
        $return .= ";";

    echo "
    // {$scene['name']} {$scene['desc']}
    public function scene{$tmp_name}()
    {
        {$return}
    }
    ";

    }
}
?>

}