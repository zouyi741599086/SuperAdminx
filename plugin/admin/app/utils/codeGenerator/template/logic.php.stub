<?php
/**
 * 生成逻辑层
 */
use plugin\admin\app\utils\codeGenerator\CodeGenerator;

    $data = CodeGenerator::getCodeGeneratorInfo($table_name);

    // 当前的表名转驼峰
    $tableNameToCamelCase = CodeGenerator::toCamelCase($table_name);

    // 是否有sort字段
    $isSort = false;
    $tableColumn = CodeGenerator::getTableColumn($table_name);
    foreach ($tableColumn as $key => $value) {
        if ($value['Field'] == 'sort') {
            $isSort = true;
        }
    }

    // 排序规则
    $orderBy = $isSort ? "sort desc,id desc" : "id desc";

    // 当前的表名转驼峰，用来当缓存标识
    $tableNameToCamelCase = CodeGenerator::toCamelCase($table_name);
?>
namespace <?php echo $file_path ?? ''; ?>;

<?php
    // 引入模型
    echo "use {$data['model']['file_path']}\\{$data['model']['file_name']};\n";
    
    // 引入验证器
    echo "use {$data['validate']['file_path']}\\{$data['validate']['file_name']};\n";  

    if (isset($logic_type) && $logic_type == 2) {
    echo "use support\Cache;\n";
    }
?>
use think\facade\Db;

/**
 * <?php echo $table_title ?? '';?> 逻辑层
 *
 * @author zy <741599086@qq.com>
 * @link https://www.superadminx.com/
 * */
class <?php echo $file_name ?? ''; ?>

{
<?php
    // getList方法
    if (isset($data['controller']['functions']) && in_array('getList', $data['controller']['functions'])) {
        // 常规方法
        if (isset($logic_type) && $logic_type == 1) {
    echo "
    /**
     * 列表
     * @param array \$params get参数
     * @param bool \$page 是否需要翻页，不翻页则返回模型
     * */
    public static function getList(array \$params = [], bool \$page = true)
    {
        // 排序
        \$orderBy = \"{$orderBy}\";\n";

        //排序是否有sort字段
        echo "        if (isset(\$params['orderBy']) && \$params['orderBy']) {
            \$orderBy = \"{\$params['orderBy']},{\$orderBy}\";
        }\n";

        // 如果有搜索
        if (isset($data['model']['search']) && is_array($data['model']['search'])) {
                $searchFields = implode("', '", array_keys($data['model']['search']));
        echo "
        \$list = {$data['model']['file_name']}::withSearch(['{$searchFields}'], \$params)
        //->withoutField('')\n";
        } else {
        echo "
        \$list = {$data['model']['file_name']}::withoutField('')\n";
        }

        echo "        //->with([])
        ->order(\$orderBy);\n

        return \$page ? \$list->paginate(\$params['pageSize'] ?? 20) : \$list;
    }";
        }

        // 全表缓存
        if (isset($logic_type) && $logic_type == 2) {

    echo "
    /**
     * 列表
     * */
    public static function getList()
    {
        \$list = Cache::get('{$tableNameToCamelCase}');
        if (is_null(\$list)) {
            \$list = {$data['model']['file_name']}::order('{$orderBy}')
                ->select()
                ->toArray();
			Cache::set('{$tableNameToCamelCase}', \$list, 86400);
        }
        return \$list;
    }";   
        }
    }
?>

<?php
    // create方法
    if (isset($data['controller']['functions']) && in_array('create', $data['controller']['functions'])) {
        // 是否有该方法的验证场景
        $scenes = '';
        if (isset($data['validate']['scenes']) && is_array($data['validate']['scenes'])) {
            foreach ($data['validate']['scenes'] as $key => $value) {
                if ($value['name'] == 'create') {
                    $scenes = "->scene('create')";
                }
            }
        }

        echo "
    /**
     * 新增
     * @param array \$params
     */
    public static function create(array \$params)
    {
        Db::startTrans();
        try {
            validate({$data['validate']['file_name']}::class){$scenes}->check(\$params);

            {$data['model']['file_name']}::create(\$params);";
        
            // 是否有全局缓存
            if (isset($logic_type) && $logic_type == 2) {
                echo "
            Cache::delete(\"{$tableNameToCamelCase}\");";
            }

            echo "
            Db::commit();
        } catch (\Exception \$e) {
            Db::rollback();
            abort(\$e->getMessage());
        }
    }";

    }
?>

<?php
    // findData方法
    if (isset($data['controller']['functions']) && in_array('findData', $data['controller']['functions'])) {
        echo "
    /**
     * 获取数据
     * @param int \$id 数据id
     */
    public static function findData(int \$id)
    {";
        // 是否缓存数据
        if (isset($logic_type) && $logic_type == 2) {

            echo "
        \$data = Cache::get(\"{$tableNameToCamelCase}{\$id}\");
        if (is_null(\$data)) {
            \$data = {$data['model']['file_name']}::find(\$id);
			Cache::set(\"{$tableNameToCamelCase}{\$id}\", \$data, 86400);
        }
        return \$data;";

        } else {

            echo "
        return {$data['model']['file_name']}::find(\$id);";

        }

    echo "
    }";

    }
?>

<?php
    // update方法
    if (isset($data['controller']['functions']) && in_array('update', $data['controller']['functions'])) {
        // 是否有该方法的验证场景
        $scenes = '';
        if (isset($data['validate']['scenes']) && is_array($data['validate']['scenes'])) {
            foreach ($data['validate']['scenes'] as $key => $value) {
                if ($value['name'] == 'update') {
                    $scenes = "->scene('update')";
                }
            }
        }

        echo "
    /**
     * 更新
     * @param array \$params
     */
    public static function update(array \$params)
    {
        Db::startTrans();
        try {
            validate({$data['validate']['file_name']}::class){$scenes}->check(\$params);

            {$data['model']['file_name']}::update(\$params);";

            // 是否有全表缓存
            if (isset($logic_type) && $logic_type == 2) {
                echo "
            Cache::delete(\"{$tableNameToCamelCase}\");
            Cache::delete(\"{$tableNameToCamelCase}{\$params['id']}\");";
            }
            
        echo "
            Db::commit();
        } catch (\Exception \$e) {
            Db::rollback();
            abort(\$e->getMessage());
        }
    }";

    }
?>

<?php
    // delete方法
    if (isset($data['controller']['functions']) && in_array('delete', $data['controller']['functions'])) {
        echo "
    /**
     * 删除
     * @param int|array \$id 要删除的id
     */
    public static function delete(int|array \$id)
    {
        {$data['model']['file_name']}::destroy(\$id);";

        // 是否有全表缓存
        if (isset($logic_type) && $logic_type == 2) {

            echo "

        Cache::delete(\"{$tableNameToCamelCase}\");
        if (is_array(\$id)) {
            foreach (\$id as \$v) {
                Cache::delete(\"{$tableNameToCamelCase}{\$v}\");
            } 
        } else {
            Cache::delete(\"{$tableNameToCamelCase}{\$id}\");
        }";

        }

    echo "
    }";

    }
?>

<?php
    // updateSort更新排序
    if (isset($data['controller']['functions']) && in_array('updateSort', $data['controller']['functions'])) {
        echo "
    /**
     * 更改排序
     * @param array \$params
     * */
    public static function updateSort(array \$params)
    {
        Db::startTrans();
        try {
            foreach (\$params as \$v) {
                {$data['model']['file_name']}::update([
                    'id' => \$v['id'],
                    'sort' => intval(\$v['sort'])
                ]);
            }";

            // 是否全表缓存
            if (isset($logic_type) && $logic_type == 2) {
            echo "
            Cache::delete(\"{$tableNameToCamelCase}\");";
            }

            echo "
            Db::commit();
        } catch (\Exception \$e) {
            Db::rollback();
            abort(\$e->getMessage());
        }
    }";

    }
?>

<?php
    // updateStatus更新状态
    if (isset($data['controller']['functions']) && in_array('updateStatus', $data['controller']['functions'])) {
        echo "
    /**
     * 更新状态
     * @param int|array \$id
     * @param int \$status
     */
    public static function updateStatus(int|array \$id, int \$status)
    {
        Db::startTrans();
        try {
            {$data['model']['file_name']}::where('id', 'in', \$id)->update([
                'status' => \$status
            ]);";

            // 是否全表缓存
            if (isset($logic_type) && $logic_type == 2) {
                echo "
            Cache::delete(\"{$tableNameToCamelCase}\");
            if (is_array(\$id)) {
                foreach (\$id as \$v) {
                    Cache::delete(\"{$tableNameToCamelCase}{\$v}\");
                }
            } else {
                Cache::delete(\"{$tableNameToCamelCase}{\$id}\");
            }";
            }

            echo "
            Db::commit();
        } catch (\Exception \$e) {
            Db::rollback();
            abort(\$e->getMessage());
        }
    }";

    }
?>

<?php
    // 搜索选择某条数据
    if (isset($data['controller']['functions']) && in_array('select', $data['controller']['functions'])) {
        echo "
    /**
     * 搜索选择某条数据
     * @param array \$params 
     */
    public static function select{$tableNameToCamelCase}(array \$params)
    {";
        // 排序
        $order = 'id desc';
        // 从表中读所有字段，判断是否有title、name、tel这三个字段，然后生成只搜索这三个字段
        $tmpFields = [];
        foreach ($tableColumn as $v) {
            if (in_array($v['Field'], ['title','name','tel'])) {
                $tmpFields[] = $v['Field'];
            }
            if ($v['Field'] == 'sort') {
                $order = 'sort desc,id desc';
            }
        }
        $tmpSearchFields = implode('|', $tmpFields);
        $tmpSelectFields = implode(',', $tmpFields);
        echo "
        return {$data['model']['file_name']}::field('id,{$tmpSelectFields}')
            ->when(isset(\$params['keywords']) && \$params['keywords'], function (\$query) use (\$params)
            {
                \$query->where('{$tmpSearchFields}', 'like', \"%{\$params['keywords']}%\");
            })
            ->when(isset(\$params['id']) && \$params['id'], function (\$query) use (\$params)
            {
                \$query->where('id', 'in', \$params['id']);
            })
            ->order('{$order}')
            ->paginate(\$params['pageSize'] ?? 20);
    }";

    }
?>

<?php
    // importData导入数据  下载导入模板
    if (isset($data['controller']['functions']) && in_array('importData', $data['controller']['functions'])) {
        // 导出的表格头
        $excelHeader = isset($data['field_title']) ? implode("', '", $data['field_title']) : [];
        // 导出的表格头需要过滤掉空值
        $excelHeader = array_filter($data['field_title'] ?: [], function ($value) {  
            return $value !== null && $value !== '';  
        }); 
        $excelHeader = implode("', '", $excelHeader);

        echo "
    /**
     * 下载导入数据的表格模板
     * @param array \$params
     */
    public static function downloadImportExcel()
    {
        try {
            // 表格头
            \$tableData = [['{$excelHeader}']];

            // 模板里面如果有数据，则继续网\$tableData里面装 
            
            // 开始生成表格导出
            \$config    = [
                'path' => public_path() . '/tmp_file',
            ];
            \$fileName   = \"导入{$data['table_title']}.xlsx\";
            \$excel      = new \Vtiful\Kernel\Excel(\$config);
            \$fileObject = \$excel->fileName(rand(1, 1000000) . '.xlsx')->header([])->data(\$tableData);
            \$fileHandle = \$fileObject->getHandle();

            // 第一行合并单元格
            \$fileObject->mergeCells(\"A1:L1\", \"1：请按照表格录入数据\\n2：每一列都是必填项，为空将导致导入失败\");
            // 第一行样式
            \$format1 = new \Vtiful\Kernel\Format(\$fileHandle);
            \$fileObject->setRow(\"A1\", 60, \$format1
                ->wrap()
                ->bold()
                ->fontColor(\Vtiful\Kernel\Format::COLOR_RED)
                ->align(\Vtiful\Kernel\Format::FORMAT_ALIGN_VERTICAL_CENTER)
                ->toResource()
            );
            // 标题第二行样式
            \$format2 = new \Vtiful\Kernel\Format(\$fileHandle);
            \$fileObject->setRow(\"A2\", 22, \$format2
                ->bold()
                ->fontColor(\Vtiful\Kernel\Format::COLOR_RED)
                ->align(\Vtiful\Kernel\Format::FORMAT_ALIGN_VERTICAL_CENTER)
                ->toResource()
            );

            // 设置列的宽度
            //\$fileObject->setColumn('A1:A1000', 10);
            //\$fileObject->setColumn('B1:B1000', 30);

            // 下拉选择，如果需要的话，下拉文字总数不能超过255，否则报错
            //\$typeArr = ['选择项1', '选择项2'];
            //\$validation = new \Vtiful\Kernel\Validation();
            //\$validation->validationType(\Vtiful\Kernel\Validation::TYPE_LIST)->valueList(\$typeArr);
            //\$fileObject->validation('A3:A1000', \$validation->toResource());

            \$filePath = \$fileObject->output();
            \$filePath = str_replace(public_path(), '', \$filePath);
            \$excel->close();
    
            return [
                'filePath' => export_path(\$filePath),
                'fileName' => \$fileName
            ];
        } catch (\Exception \$e) {
            abort(\$e->getMessage());
        }
    }";

    }
?>

<?php
    // importData导入数据
    if (isset($data['controller']['functions']) && in_array('importData', $data['controller']['functions'])) {
        echo "
    /**
     * 导入数据
     * @param string \$file 上传表格文件的路劲
     */
    public static function importData(string \$file)
    {
        \$config = ['path' => public_path()];
        \$excel  = new \Vtiful\Kernel\Excel(\$config);
    
        Db::startTrans();
        try {
            // 读取文件
            \$excel->openFile(\$file)->openSheet();
    
            \$list = [];
            \$counter = 0;
            // 游标读取每行数据减少内存消耗，此处判断请使用【!==】运算符进行判断；
            // 如果使用【!=】进行判断，出现空行时，返回空数组，将导致读取中断；
            while ((\$row = \$excel->nextRow()) !== NULL) {
                \$counter++;
                // 前面两行不导入
                if (\$counter < 2) {
                    continue;
                }
                \$list[] = [";
                    if (isset($data['field_title'])) {
                        $tmp = 0;
                        foreach ($data['field_title'] as $key => $value) {
                            if ($value) {
                            echo "
                    \$v['{$key}'] = \$row[{$tmp}],";
                            }
                            $tmp++;
                        }
                    }
                echo "
                ];
            }
            \$excel->close();

            (new {$data['model']['file_name']}())->saveAll(\$list);";
              
            // 是否全表缓存
            if (isset($logic_type) && $logic_type == 2) {
                echo "
            Cache::delete(\"{$tableNameToCamelCase}\");\n";
            }

            echo "
            Db::commit();
        } catch (\Exception \$e) {
            Db::rollback();
            abort(\$e->getMessage());
        }
    }";

    }
?>

<?php
    // exportData导出数据
    if (isset($data['controller']['functions']) && in_array('exportData', $data['controller']['functions'])) {
        
        // 导出的表格头
        $excelHeader = isset($data['field_title']) ? implode("', '", $data['field_title']) : [];
        // 导出的表格头需要过滤掉空值
        $excelHeader = array_filter($data['field_title'] ?: [], function ($value) {  
            return $value !== null && $value !== '';  
        }); 
        $excelHeader = implode("', '", $excelHeader);

        echo "
    /**
     * 导出数据
     * @param array \$params get参数，用于导出数据的控制
     * @return array
     */
    public static function exportData(array \$params) : array
    {
        try {
            \$tmpList = [];
            \$list    = self::getList(\$params, false)->cursor();
            foreach (\$list as \$v) {
                // 导出的数据
                \$tmpList[] = [";
                    if (isset($data['field_title'])) {
                        foreach ($data['field_title'] as $key => $value) {
                            if ($value) {
                            echo "
                    \$v->{$key} ?? '',";
                            }
                        }
                    }
                echo "
                ];
            }
        } catch (\Exception \$e) {
            abort(\$e->getMessage());
        }

        // 表格头
        \$header = ['{$excelHeader}'];
        return [
            'filePath' => export(\$header, \$tmpList),
            'fileName' => \"{$data['table_title']}.xlsx\",
        ];
    }";

    }
?>

<?php
    // 生成其它方法
    if (isset($other_functions) && is_array($other_functions)) {
        
        foreach ($other_functions as $key => $value) {
            // 如果方法主体内容是批量更新字段
            if ($value['function_content'] == 'updateAll') {
            echo "
    /**
     * {$value['title']}
     * @param array \$params
     */
    public static function {$value['name']}(array \$params)
    {
        Db::startTrans();
        try {
            // 为了file表记录更新带附件的字段，所以用循环更新没用批量更新,因为批量更新BaseModel里面无法获取每条更新数据的id，导致file表无法记录到附件
            foreach (\$params['ids'] as \$id) {
                {$data['model']['file_name']}::update([
                    'xxx' => \$params['xxx'],
                    'id' => \$id,
                ]);
            }\n";
            
            // 是否有全表缓存
            if (isset($logic_type) && $logic_type == 2) {
                echo "
            // 删除缓存
            Cache::delete(\"{$tableNameToCamelCase}\");
            foreach (\$params['ids'] as \$id) {
                Cache::delete(\"{$tableNameToCamelCase}{\$id}\");
            }";
            }
            
        echo "
            Db::commit();
        } catch (\Exception \$e) {
            Db::rollback();
            abort(\$e->getMessage());
        }
    }
    ";

        }

        // 自己写方法主体内容
        if ($value['function_content'] == 'empty') {
            echo "
    /**
     * {$value['title']}
     * @param array \$params
     */
    public static function {$value['name']}(array \$params)
    {
        
    }
    ";

        }

        }
    }
?>

}