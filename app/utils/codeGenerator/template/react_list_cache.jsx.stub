<?php
/**
 * 列表页，全表缓存不翻页并且只有一个字段的时候
 */
    use app\utils\codeGenerator\CodeGenerator;
    use app\common\model\AdminMenuModel;

    $data = CodeGenerator::getCodeGeneratorInfo($table_name);

    //引入api的文件名称
    $apiFileName = CodeGenerator::toCamelCase($table_name);
    $apiFileName = strtolower($apiFileName[0]) . substr($apiFileName, 1);
?>
import { useState } from 'react';
import { PageContainer } from '@ant-design/pro-components';
import { <?php echo $apiFileName;?>Api } from '@/api/<?php echo $apiFileName;?>';
import { ProCard } from '@ant-design/pro-components';
import { useMount } from 'ahooks';
import { App, Button, Popconfirm, Alert } from 'antd';
import {
    FormOutlined,
    DeleteOutlined,
} from '@ant-design/icons';
import { authCheck } from '@/common/function';
import Lazyload from '@/component/lazyLoad/index';
import Create from './create';
import Update from './update';

import {
    DndContext,
    closestCenter,
    KeyboardSensor,
    PointerSensor,
    useSensor,
    useSensors,
} from '@dnd-kit/core';
import { restrictToParentElement } from "@dnd-kit/modifiers";
import {
    useSortable,
    arrayMove,
    SortableContext,
    sortableKeyboardCoordinates,
    rectSortingStrategy, //排序碰撞算法，有水平、垂直等
} from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';

/**
 * <?php echo $table_title ?? '';?> 
 *
 * @author zy <741599086@qq.com>
 * @link https://www.superadminx.com/
 * */
export default () => {

    const { message } = App.useApp();

    useMount(() => {
        getList();
    })

    ////////////////////修改/////////////////////////
    const [updateId, setUpdateId] = useState(0);

    ///////////////////删除///////////////////////////
    const del = id => {
        <?php echo $apiFileName;?>Api.delete({
            id
        }).then(res => {
            if (res.code === 1) {
                message.success(res.message)
                getList();
            } else {
                message.error(res.message)
            }
        })
    }

    ////////////////////获取列表///////////////////////////
    const [list, setList] = useState([]);
    const getList = () => {
        <?php echo $apiFileName;?>Api.getList().then(res => {
            if (res.code === 1) {
                setList(res.data);
            }
        })
    }

    /////////////////////////拖拽排序//////////////////////////
    const sensors = useSensors(
        useSensor(PointerSensor, {
            activationConstraint: {
                distance: 1,
            }
        }),
        useSensor(KeyboardSensor, {
            coordinateGetter: sortableKeyboardCoordinates,
        }),

    );
    //拖拽结束后
    const handleDragEnd = (event) => {
        const { active, over } = event;
        if (active.id !== over?.id) {
            let _fileList = (() => {
                const oldIndex = list.findIndex((i) => i.id === active.id);
                const newIndex = list.findIndex((i) => i.id === over?.id);
                return arrayMove(list, oldIndex, newIndex);
            })();
            //重新更新排序字段的值
            _fileList = _fileList.map((item,index) => {
                return {
                    ...item,
                    sort: index+1
                }
            })
            setList(_fileList);
            //更新排序
            <?php echo $apiFileName;?>Api.updateSort({ list: _fileList });
        }
    }

    return (
        <>
            <Lazyload block={false}>
                <Update
                    updateId={updateId}
                    setUpdateId={setUpdateId}
                    getList={getList}
                />
            </Lazyload>
            <PageContainer
                className="sa-page-container"
                ghost
                header={{
                    title: '<?php echo $table_title ?? '';?>',
                    style: { padding: '12px 24px' },
                }}
                content={<Alert message="可鼠标按住元素拖动排序~" type="warning" />}
            >
                <ProCard
                    title={<Lazyload block={false}>
                        <Create getList={getList} />
                    </Lazyload>}
                >
                    <DndContext
                        sensors={sensors}
                        collisionDetection={closestCenter}
                        onDragEnd={handleDragEnd}
                        modifiers={[restrictToParentElement]}
                    >
                        <SortableContext
                            items={list.map(i => i.id)}
                            strategy={rectSortingStrategy}
                        >
                            {list.map(item => <Item
                                {...item}
                                setUpdateId={setUpdateId}
                                del={del}
                                key={item.id}
                            />)}
                        </SortableContext>
                    </DndContext>

                </ProCard >
            </PageContainer >
        </>
    )
}


const Item = (props) => {
    const {
        attributes,
        listeners,
        setNodeRef,
        transform,
        transition,
        isDragging
    } = useSortable({
        id: props.id,
    });

    const style = {
        transform: CSS.Transform.toString(transform),
        transition,
    };

    return <div
        key={props.id}
        style={style}
        ref={setNodeRef}
        className={isDragging ? 'list-title-item' : 'list-title-item'}
        {...attributes}
        {...listeners}
    >
        <div className='item'>
            <span>{props.title}</span>
            <div className="hover">
                <div>
                    <Button type="text" size="small" onClick={() => props.setUpdateId(props.id)} disabled={authCheck('<?php echo CodeGenerator::toCamelCase($table_name,true) . 'Update'; ?>')}>
                        <FormOutlined className="icon" />
                    </Button>
                    <Popconfirm
                        title="确认要删除吗？"
                        onConfirm={() => props.del(props.id)}
                        disabled={authCheck('<?php echo CodeGenerator::toCamelCase($table_name, true) . 'Delete';?>')}
                    >
                        <Button type="text" size="small" disabled={authCheck('<?php echo CodeGenerator::toCamelCase($table_name, true) . 'Delete';?>')} >
                            <DeleteOutlined className="icon" />
                        </Button>
                    </Popconfirm>
                </div>
            </div>
        </div>
    </div >
}