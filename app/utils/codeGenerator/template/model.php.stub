<?php
/**
 * 生成模型
 */
use app\utils\codeGenerator\CodeGenerator;

$delete_time = false; // 是否有软删除时间字段
$create_time = false; // 是否有添加时间字段
$update_time = false; // 是否有更新时间字段
foreach ($table_column as $k => $v) {
    if ($v['Field'] == 'create_time') {
        $create_time = true;
    }
    if ($v['Field'] == 'update_time') {
        $update_time = true;
    }
    if ($v['Field'] == 'delete_time') {
        $delete_time = true;
    }
}
?>
namespace <?php echo $file_path ?? ''; ?>;

<?php
    // 多对多模型中间表的时候
    if (isset($is_middle) && $is_middle == true) {
echo "use think\model\Pivot;\n";
    }
    // 软删除
    if ($delete_time) {
echo "use think\model\concern\SoftDelete;\n";
    }
?>

/**
 * <?php echo $table_title ?? '';?> 模型
 *
 * @author zy <741599086@qq.com>
 * @link https://www.superadminx.com/
 * */
class <?php echo $file_name ?? ''; ?> extends <?php echo (isset($is_middle) && $is_middle == true) ? 'Pivot' : 'BaseModel'; ?>

{
<?php
    if ($delete_time) {
echo "    use SoftDelete;\n";
    }
?>

    // 表名
    protected $name = '<?php echo substr($table_name, strlen(getenv('DB_PREFIX'))); ?>';
<?php
    if ($delete_time) {
echo "    // 软删除
    protected \$deleteTime = 'delete_time';";
    }
?>

    // 自动时间戳
<?php
    if ($create_time == false && $update_time == false) {
    echo "    protected \$autoWriteTimestamp = false;\n";
    }
    if ($create_time == true && $update_time == true) {
    echo "    protected \$autoWriteTimestamp = true;\n";  
    }
    if ($create_time == false && $update_time == true) {
    echo "    protected \$createTime = false;\n";  
    }
    if ($create_time == true && $update_time == false) {
    echo "    protected \$updateTime = false;\n";  
    }
?>

    // 字段类型转换
    protected $type = [
<?php
    // 字段类型
    if (isset($type) && is_array($type)) {     
        foreach ($type as $key => $value) {
            echo "        '{$key}' => '{$value}',
";
        }
    }
?>
    ];

    // 包含附件的字段，''代表直接等于附件路劲，'array'代表数组中包含附件路劲，'editor'代表富文本中包含附件路劲
    protected $file = [
<?php
    // 包含附件的字段
    if (isset($file) && is_array($file)) {      
        foreach ($file as $key => $value) {
            echo "        '{$key}' => '{$value}',
";
        }
    }
?>
    ];

<?php
    // 修改器
    if (isset($set) && is_array($set)) {
        foreach ($set as $key => $value) {
            //注释
            $tmp_field_title = (isset($field_title[$key]) && $field_title[$key] != '') ? $field_title[$key] : $key;
            echo "    // {$tmp_field_title} 修改器";

            //修改器的方法名，要将字段名转驼峰
            $function_name = CodeGenerator::toCamelCase($key);
            
    echo "
    public function set{$function_name}Attr(\$value, \$data)
    {\n";

    echo "
    }\n\n";

        }
    }
?>
<?php
    // 获取器
    if (isset($get) && is_array($get)) {
        foreach ($get as $key => $value) {
            // 注释
            $tmp_field_title = (isset($field_title[$key]) && $field_title[$key] != '') ? $field_title[$key] : $key;
            echo "    // {$tmp_field_title} 获取器";

            // 获取器的方法名，要将字段名转驼峰
            $function_name = CodeGenerator::toCamelCase($key);
            
    echo "
    public function get{$function_name}Attr(\$value, \$data)
    {\n";

    echo "
    }\n\n";

        }
    }
?>

<?php
    // 搜索器
    if (isset($search) && is_array($search)) {
        foreach ($search as $key => $value) {
            // 注释
            $tmp_field_title = (isset($field_title[$key]) && $field_title[$key] != '') ? $field_title[$key] : $key;
            echo "    // {$tmp_field_title} 搜索器";

            // 搜索器的方法名，要将字段名转驼峰
            $function_name = CodeGenerator::toCamelCase($key);
            
    echo "
    public function search{$function_name}Attr(\$query, \$value, \$data)
    {\n";
    
    // 等于
    if ($value == '=') {
        echo "        (\$value != null) && \$query->where('{$key}', '=', \$value);";
    }
    // 模糊搜索
    if ($value == 'like') {
        echo "        (\$value != null) && \$query->where('{$key}', 'like', \"%{\$value}%\");";
    }
    // 日期范围搜索
    if ($value == 'BETWEEN_TIME') {
        echo "        (\$value && is_array(\$value)) && \$query->where('{$key}', 'between', [\"{\$value[0]} 00:00:00\", \"{\$value[1]} 23:59:59\"]);";
    }
    // 不等于
    if ($value == '<>') {
        echo "        (\$value != null) && \$query->where('{$key}', '<>', \$value);";
    }
    // 大于
    if ($value == '>') {
        echo "        (\$value != null) && \$query->where('{$key}', '>', \$value);";
    }
    // 小于
    if ($value == '<') {
        echo "        (\$value != null) && \$query->where('{$key}', '<', \$value);";
    }
    // 大于等于
    if ($value == '>=') {
        echo "        (\$value != null) && \$query->where('{$key}', '>=', \$value);";
    }
    // 小于等于
    if ($value == '<=') {
        echo "        (\$value != null) && \$query->where('{$key}', '<=', \$value);";
    }
    // in
    if ($value == 'in') {
        echo "        (\$value != null) && \$query->where('{$key}', 'in', \$value);";
    }
    // not in
    if ($value == 'not in') {
        echo "        (\$value != null) && \$query->where('{$key}', 'not in', \$value);";
    }
    // not in
    if ($value == 'between') {
        echo "        (\$value != null) && \$query->where('{$key}', 'between', \$value);";
    }

    echo "
    }\n\n";

        }
    }
?>

<?php
    // 关联模型
    if (isset($relevance) && is_array($relevance)) {
        foreach ($relevance as $key => $value) {
            // 注释
            echo "    // {$value['title']} 关联模型";

            // 方法名，同时也是关联的模型名，要将表名转驼峰
            $function_name = CodeGenerator::toCamelCase($value['model']);
            
    echo "
    public function {$function_name}()
    {\n";
    
    // 一对一关联
    if ($value['type'] == 'hasOne') {
        echo "        return \$this->hasOne({$function_name}Model::class);";
    }
    // 一对多
    if ($value['type'] == 'hasMany') {
        echo "        return \$this->hasMany({$function_name}Model::class);";
    }
    // 反向一对一
    if ($value['type'] == 'belongsTo') {
        echo "        return \$this->belongsTo({$function_name}Model::class);";
    }
    // 不等于
    if ($value['type'] == 'belongsToMany') {
        // 中间表类名
        $middle_name = CodeGenerator::toCamelCase($value['middle']);
        // 中间表中当前模型键名
        $me_id = preg_replace('/^' . preg_quote(getenv('DB_PREFIX'), '/') . '/', '', $table_name) . '_id';
        // 中间表中关联模型的键名
        $to_id = preg_replace('/^' . preg_quote(getenv('DB_PREFIX'), '/') . '/', '', $value['model']) . '_id';
        echo "        return \$this->belongsToMany({$function_name}Model::class, {$middle_name}Model::class, '{$me_id}', '{$to_id}');";
    }

    echo "
    }\n\n";

        }
    }
?>
}