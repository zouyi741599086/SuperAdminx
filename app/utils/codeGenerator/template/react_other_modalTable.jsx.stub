<?php
/**
 * 弹窗table
 */
    use app\utils\codeGenerator\CodeGenerator;
    use app\common\model\AdminMenuModel;

    $data = CodeGenerator::getCodeGeneratorInfo($table_name);

    // 引入api的文件名称
    $apiFileName = CodeGenerator::toCamelCase($table_name);
    $apiFileName = strtolower($apiFileName[0]) . substr($apiFileName, 1);

    // 需要引入的组件
    $antdComponent = [];

    // 需要导入的自定义组件
    $zidingyiComponent = [];


    if (isset($list_fields_type)) {
        foreach ($list_fields_type as $k => $v) {
            // 需要引入图片组件
            if (($v == 'image' || $v == 'descriptions') && !in_array('Image', $antdComponent)) {
                $antdComponent[] = 'Image';
            }
            // 需要引入Tag组件
            if ($v == 'tag' && !in_array('Tag', $antdComponent)) {
                $antdComponent[] = 'Tag';
            }
            // 需要引入头像组件
            if (($v == 'avatar' || $v == 'user') && !in_array('Avatar', $antdComponent)) {
                $antdComponent[] = 'Avatar';
            }
            // 需要引入Switch开关组件
            if ($v == 'switch' && !in_array('Switch', $antdComponent)) {
                $antdComponent[] = 'Switch';
            }
            // 需要引入排序的InputNumber组件
            if ($v == 'sort' && !in_array('InputNumber', $antdComponent)) {
                $antdComponent[] = 'InputNumber';
            }
            // 需要引入进度条组件
            if ($v == 'progress' && !in_array('Progress', $antdComponent)) {
                $antdComponent[] = 'Progress';
            }
            // 需要引入弹窗描述组件
            if ($v == 'descriptions' && !in_array('Descriptions', $antdComponent)) {
                $antdComponent[] = 'Descriptions';
                $antdComponent[] = 'Popover';
            }
            // 需要微标组件
            if (($v == 'badge_number' || $v == 'badge_status') && !in_array('Badge', $antdComponent)) {
                $antdComponent[] = 'Badge';
            }

            // 弹窗查看文本
            if ($v == 'preview_text') {
                $zidingyiComponent[] = "import PreviewContent from '@/component/preview/content/index';";
            }
            // 弹窗查看富文本
            if ($v == 'preview_teditor') {
                $zidingyiComponent[] = "import PreviewTeditor from '@/component/preview/teditor/index';";
            }
            // 预览多图或视频
            if ($v == 'preview_images_videos') {
                $zidingyiComponent[] = "import PreviewImagesVideos from '@/component/preview/imagesVideos/index';";
            }
            // 预览视频
            if ($v == 'preview_video') {
                $zidingyiComponent[] = "import PreviewVideo from '@/component/preview/video/index';";
            }
            // 预览pdf
            if ($v == 'preview_pdf') {
                $zidingyiComponent[] = "import PreviewPdf from '@/component/preview/pdf/index';";
            }
            // 预览word
            if ($v == 'preview_word') {
                $zidingyiComponent[] = "import PreviewWord from '@/component/preview/word/index';";
            }

        }
    }
?>
import { useRef, lazy, useState} from 'react';
import { ModalForm } from '@ant-design/pro-components';
import { <?php echo $apiFileName;?>Api } from '@/api/<?php echo $apiFileName;?>';
import { ProTable } from '@ant-design/pro-components';
import { App, Button, Typography,
<?php 
    foreach ($antdComponent as $v) {
echo "{$v}, ";
    }
?>
} from 'antd';
import {
    DeleteOutlined,
    PlusOutlined,
} from '@ant-design/icons';
import { useUpdateEffect } from 'ahooks';
import Lazyload from '@/component/lazyLoad/index';
<?php
    // 导入自定义的组件
    foreach ($zidingyiComponent as $v) {
echo "{$v}\n";
    }
?>

<?php
    // 如果有引入图片标签，则引入图片打开失败的时候的图片
    if (in_array('Image', $antdComponent)) {
echo "const imgErr = new URL('@/static/default/imgErr.png', import.meta.url).href;\n";
    }
?>

/**
 * <?php echo $table_title ?? '';?> 
 *
 * @author zy <741599086@qq.com>
 * @link https://www.superadminx.com/
 * */
export default ({ tableReload, id, setId, ...props }) => {
    const tableRef = useRef();
    const { message } = App.useApp();
    const [open, setOpen] = useState(false);

    useUpdateEffect(() => {
        if (id > 0) {
            setOpen(true);
        }
    }, [id])

    ///////////////////////////刷新表格数据///////////////////////
    const tableRe = () => {
        tableRef?.current?.reset?.();
    }

    // 表格列 
    const columns = [
<?php
    if (isset($list_fields_type)) {
        foreach ($list_fields_type as $field => $type) {
            // 字段的中文名称
            $tmp_field_title = (isset($field_title[$field]) && $field_title[$field] != '') ? $field_title[$field] : $field;
            
            // 列的参数
            $columnsParams = "            title: '{$tmp_field_title}',\n";
            $columnsParams .= "            dataIndex: '{$field}',\n";

            // 是否支持搜索
            if (isset($list_fields_type_config[$field]['search']) && $list_fields_type_config[$field]['search']) {
                $columnsParams .= "            search: true,\n";
            } else {
                $columnsParams .= "            search: false,\n";
            }
            // 是否自动省略
            if (isset($list_fields_type_config[$field]['ellipsis']) && $list_fields_type_config[$field]['ellipsis']) {
                $columnsParams .= "            ellipsis: true,\n";
            }
            // 是否支持复制
            if (isset($list_fields_type_config[$field]['copyable']) && $list_fields_type_config[$field]['copyable']) {
                $columnsParams .= "            copyable: true,\n";
            }
            // 是否支持排序
            if (isset($list_fields_type_config[$field]['sorter']) && $list_fields_type_config[$field]['sorter']) {
                $columnsParams .= "            sorter: true,\n";
            }
            // 列的参数 前面加换行
            if ($columnsParams) {
                $columnsParams = "\n{$columnsParams}";
            }
            $columnsParams = rtrim($columnsParams);

            include __DIR__ . "/react_table_column.jsx.stub";

        }
    }
?> 
    ];

    return <>
        <ModalForm
            name="list<?php echo CodeGenerator::toCamelCase($table_name);?>"
            open={open}
            onOpenChange={(_boolean) => {
                setOpen(_boolean);
                // 关闭的时候干掉id，不然无法重复修改同一条数据
                if (_boolean === false) {
                    setId(0);
                }
            }}
            title="<?php echo $modal_table_title ?? '';?>"
            //trigger={
            //    <Button 
            //        //type="primary" 
            //        type="link"
            //        size="small"
            //        disabled={authCheck('<?php echo $modal_table_auth_id ?? 0;?>')} 
            //        icon={<EditOutlined />}
            //    ><?php echo $modal_table_title ?? '';?></Button>
            //}
            width={1000}
            layout="horizontal"
            modalProps={{
                destroyOnHidden: true,
            }}
            submitter={false}
        >
            <ProTable
                actionRef={tableRef}
                rowKey="id"
                ghost={true}
                search={false}
                size="small"
                options={false}
                // 列名
                columns={columns}
                // 滚动条
                scroll={{
                    x: 800
                }}
                // 翻页
                pagination={{
                    defaultPageSize: 10,
                    size: 'default',
                    // 支持跳到多少页
                    showQuickJumper: true,
                    showSizeChanger: true,
                    responsive: true,
                }}
                params={{
                    id: id
                }}
                // 请求数据
                request={async (params = {}, sort, filter) => {
                    // 排序的时候
                    let orderBy = '';
                    for (let key in sort) {
                        orderBy = key + ' ' + (sort[key] === 'descend' ? 'desc' : 'asc');
                    }
                    const res = await <?php echo $apiFileName;?>Api.<?php echo $modal_table_api_name;?>({
                        ...params,// 包含了翻页参数跟搜索参数
                        orderBy, // 排序
                        page: params.current,
                    });
                    return {
                        data: res.data.data,
                        success: true,
                        total: res.data.total,
                    };
                }}

            />
        </ModalForm>
    </>;
};